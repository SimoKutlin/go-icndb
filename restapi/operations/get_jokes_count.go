// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetJokesCountHandlerFunc turns a function with the right signature into a get jokes count handler
type GetJokesCountHandlerFunc func(GetJokesCountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJokesCountHandlerFunc) Handle(params GetJokesCountParams) middleware.Responder {
	return fn(params)
}

// GetJokesCountHandler interface for that can handle valid get jokes count params
type GetJokesCountHandler interface {
	Handle(GetJokesCountParams) middleware.Responder
}

// NewGetJokesCount creates a new http.Handler for the get jokes count operation
func NewGetJokesCount(ctx *middleware.Context, handler GetJokesCountHandler) *GetJokesCount {
	return &GetJokesCount{Context: ctx, Handler: handler}
}

/*GetJokesCount swagger:route GET /jokes/count getJokesCount

Get the count of the available jokes

*/
type GetJokesCount struct {
	Context *middleware.Context
	Handler GetJokesCountHandler
}

func (o *GetJokesCount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetJokesCountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
