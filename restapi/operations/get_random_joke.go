// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRandomJokeHandlerFunc turns a function with the right signature into a get random joke handler
type GetRandomJokeHandlerFunc func(GetRandomJokeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRandomJokeHandlerFunc) Handle(params GetRandomJokeParams) middleware.Responder {
	return fn(params)
}

// GetRandomJokeHandler interface for that can handle valid get random joke params
type GetRandomJokeHandler interface {
	Handle(GetRandomJokeParams) middleware.Responder
}

// NewGetRandomJoke creates a new http.Handler for the get random joke operation
func NewGetRandomJoke(ctx *middleware.Context, handler GetRandomJokeHandler) *GetRandomJoke {
	return &GetRandomJoke{Context: ctx, Handler: handler}
}

/*GetRandomJoke swagger:route GET /jokes/random getRandomJoke

Get a random joke

*/
type GetRandomJoke struct {
	Context *middleware.Context
	Handler GetRandomJokeHandler
}

func (o *GetRandomJoke) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRandomJokeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
